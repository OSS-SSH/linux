cat <<EOF
/**
<<<<<<< HEAD
<<<<<<< HEAD
 * arch_${atomic}_sub_and_test - subtract value from variable and test result
=======
 * ${arch}${atomic}_sub_and_test - subtract value from variable and test result
>>>>>>> d5cf6b5674f37a44bbece21e8ef09dbcf9515554
=======
 * arch_${atomic}_sub_and_test - subtract value from variable and test result
>>>>>>> a8fa06cfb065a2e9663fe7ce32162762b5fcef5b
 * @i: integer value to subtract
 * @v: pointer of type ${atomic}_t
 *
 * Atomically subtracts @i from @v and returns
 * true if the result is zero, or false for all
 * other cases.
 */
static __always_inline bool
<<<<<<< HEAD
<<<<<<< HEAD
arch_${atomic}_sub_and_test(${int} i, ${atomic}_t *v)
{
	return arch_${atomic}_sub_return(i, v) == 0;
=======
${arch}${atomic}_sub_and_test(${int} i, ${atomic}_t *v)
{
	return ${arch}${atomic}_sub_return(i, v) == 0;
>>>>>>> d5cf6b5674f37a44bbece21e8ef09dbcf9515554
=======
arch_${atomic}_sub_and_test(${int} i, ${atomic}_t *v)
{
	return arch_${atomic}_sub_return(i, v) == 0;
>>>>>>> a8fa06cfb065a2e9663fe7ce32162762b5fcef5b
}
EOF
